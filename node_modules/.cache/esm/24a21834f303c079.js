let mongoose,orderItemSchema,productSchema;_f30‍.x([["addCart",()=>addCart],["getCart",()=>getCart],["deleteCart",()=>deleteCart],["updateCart",()=>updateCart]]);_f30‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_f30‍.w("../models/oder-item",[["default",["orderItemSchema"],function(v){orderItemSchema=v}]]);_f30‍.w("../models/products",[["default",["productSchema"],function(v){productSchema=v}]]);
 


const OrderItem = mongoose.model('OrderItem', orderItemSchema); 
const Product = mongoose.model(" Product" ,productSchema) ; 


const addCart = async (req ,res) => { 
    try { 
      let myproduct = await Product.findOne({
          _id : req.body.product
      })  
      _f30‍.g.console.log("my product est ==>" , myproduct)
      if(!myproduct) {
          res.status(400).send("Product not found")
      } 
      const {
        quantity ,
        product 
      } = req.body 
      _f30‍.g.console.log("Ma new orderItem est ===>" ,quantity ,
      product )
       const cart = new OrderItem({
        quantity ,
        product
       })  
      await cart.save() ;
       if(cart) {
           res.status(201).json(cart)
       }
        
    } catch (error) {
        res.status(400).send(error)
    }

}   
const updateCart = async (req ,res) => {
    try { 

        const cart = await OrderItem.updateOne(
            {
            _id : req.params.idc  
         } ,
              req.body ,
        {
            new :true
        }) 
        if(cart) {
            res.status(200).json({
                message : "modification reusi"  ,
                cart
            })
        }
        
    } catch (error) {
        res.status(400).send(error)
    }
}
 const deleteCart = async (req ,res) => {
     try {
         const cart = await OrderItem.deleteOne({
             _id : req.params.idc
         }) 
         if(cart) {
             res.status(200).send("update success")
         }
     } catch (error) {
         res.status(400).send(error)
     }
 }
 
const getCart = async (req ,res) => {
    try {
        const cart = await OrderItem.find().populate("product").
        exec(function (err, cart) {
          if (err) return handleError(err);
          _f30‍.g.console.log('The author is %s', cart.product.name);

     
        })
        _f30‍.g.console.log("my cart is ==>" ,cart)
        if(cart) {
             res.status(200).json(cart) 
        } 
        
    } catch (error) {
        res.status(404).json(error)
    }
} 



