let mongoose,userSchema,jwt;_570‍.x([["UserInscription",()=>UserInscription],["UserConnection",()=>UserConnection],["getUser",()=>getUser],["getUserById",()=>getUserById]]);_570‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_570‍.w("../models/user",[["default",["userSchema"],function(v){userSchema=v}]]);_570‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);

//import bcrypt from "bcrypt" 
const bcrypt = require('bcryptjs');



const secret = process.env.secret 

const User = mongoose.model("User" , userSchema) ; 

// La fonction pour la connection de l'user  

// const UserInscription = async (req ,res) => {
//     try {  

//         console.log("mon password=>" ,req.body.passwordHash)
//         const { 
//             name  ,
//             email ,
//             passwordHash  ,
//             phone  ,
//             isAdmin  ,
//             street ,
//             apartement ,
//             zip ,
//             city  ,
//             country
             
//             } = req.body  ;
           
//         console.log("Mes datas sont ==>" ,
//         name  ,
//         email ,
//         passwordHash  ,
//         phone  ,
//         isAdmin  ,
//         street ,
//         apartement ,
//         zip ,
//         city  ,
//         country
//         )
//         let  user = new User ({
//             name  ,
//             email ,
//             passwordHash ,
//             phone  ,
//             isAdmin  ,
//             street ,
//             apartement ,
//             zip ,
//             city  ,
//             country
//         }) 
          
             
//         // on fait le hachage du mot de pass 
//         user.passwordHash = await bcrypt.hash(user.passwordHash,10,function(err , hash){
//             if(err) {
//                 console.log(err)
//             }
//         })  

//         // On sauvegarder les données dans la base 
//             await user.save()  

//        if(user) {
//            res.status(201).json({
//                message : "use crée avec succes" ,
//                user 
//            })
//        } 
//        else {
//            throw new("User non crée")
//        } 
//     } catch (error) {
//         console.error(error)
//         res.status(400).send(error)
//     }
// }  
const UserInscription = async (req,res)=>{
    let user = new User ({
        name: req.body.name,
        email: req.body.email,
        passwordHash: bcrypt.hashSync(req.body.password, 10),
        phone: req.body.phone,
        isAdmin: req.body.isAdmin,
        street: req.body.street,
        apartment: req.body.apartment,
        zip: req.body.zip,
        city: req.body.city,
        country: req.body.country,
    })
    user = await user.save();

    if(!user)
    return res.status(400).send('the user cannot be created!')

    res.send(user);
}

// La fonction pour la connection de l'user  

const UserConnection = async (req ,res) => { 
    try {
        const user = await  User.find({
            email : req.body.email
        })
        if(!email) {
            res.status(401).json({
                error :"utilisateur non trouvé "
            })
        } 
        else {
            bcrypt.compare(req.body.passwordHash , user.passwordHash) 

            .then((valid)=>{ 

                if(!valid) {
                    res.status(401).json({
                        error :"mot de pass incorrect "
                    })
                } 
                else {
                    res.status(200).json({
                        userId : user.id ,
                        token : jwt.sign(
                           { 
                                userId : user.id ,
                                isAdmin: user.isAdmin
                            } , 
                           secret  ,
                          {
                              expiresIn : "24h"
                          }
                        )
                    })
                }
            }) 
            .catch((error)=> {
                _570‍.g.console.error(error)
            })
        }
    } catch (error) {
        res.status(500).json({ error })
    }

}

// je souhaite exclure le mot de passe 
const getUser = async(req ,res) => {
    try {
        const users= await User.find().select('-passwordHash'); 
        if(users) {
             res.status(200).json(users) 
        } 
        
    } catch (error) {
        res.status(404).json(error)
    }
}
const getUserById = async (req ,res) => {
    try {
        const user = await User.findOne(
            {
                _id : req.params.iduser
            } ,
         
        ).select('-passwordHash'); 
        if (user) {
            res.status(200).json(user)
        } 
       
    } catch (error) {
        res.status(404).send(error)
    }
}
 

 